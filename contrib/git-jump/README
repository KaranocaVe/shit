shit-jump
========

shit-jump is a script for helping you jump to "interesting" parts of your
project in your editor. It works by outputting a set of interesting
spots in the "quickfix" format, which editors like vim can use as a
queue of places to visit (this feature is usually used to jump to errors
produced by a compiler). For example, given a diff like this:

------------------------------------
diff --shit a/foo.c b/foo.c
index a655540..5a59044 100644
--- a/foo.c
+++ b/foo.c
@@ -1,3 +1,3 @@
 int main(void) {
-  printf("hello word!\n");
+  printf("hello world!\n");
 }
-----------------------------------

shit-jump will feed this to the editor:

-----------------------------------
foo.c:2: printf("hello word!\n");
-----------------------------------

Or, when running 'shit jump grep', column numbers will also be emitted,
e.g. `shit jump grep "hello"` would return:

-----------------------------------
foo.c:2:9: printf("hello word!\n");
-----------------------------------

Obviously this trivial case isn't that interesting; you could just open
`foo.c` yourself. But when you have many changes scattered across a
project, you can use the editor's support to "jump" from point to point.

shit-jump can generate four types of interesting lists:

  1. The beginning of any diff hunks.

  2. The beginning of any merge conflict markers.

  3. Any grep matches, including the column of the first match on a
     line.

  4. Any whitespace errors detected by `shit diff --check`.


Using shit-jump
--------------

To use it, just drop shit-jump in your PATH, and then invoke it like
this:

--------------------------------------------------
# jump to changes not yet staged for commit
shit jump diff

# jump to changes that are staged for commit; you can give
# arbitrary diff options
shit jump diff --cached

# jump to merge conflicts
shit jump merge

# documentation conflicts are hard; skip past them for now
shit jump merge :^Documentation

# jump to all instances of foo_bar
shit jump grep foo_bar

# same as above, but case-insensitive; you can give
# arbitrary grep options
shit jump grep -i foo_bar

# use the silver searcher for shit jump grep
shit config jump.grepCmd "ag --column"
--------------------------------------------------

You can use the optional argument '--stdout' to print the listing to
standard output instead of feeding it to the editor. You can use the
argument with M-x grep on Emacs:

--------------------------------------------------
# In Emacs, M-x grep and invoke "shit jump --stdout <mode>"
M-x grep<RET>shit jump --stdout diff<RET>
--------------------------------------------------

Related Programs
----------------

You can accomplish some of the same things with individual tools. For
example, you can use `shit mergetool` to start vimdiff on each unmerged
file. `shit jump merge` is for the vim-wielding luddite who just wants to
jump straight to the conflict text with no fanfare.

As of shit v1.7.2, `shit grep` knows the `--open-files-in-pager` option,
which does something similar to `shit jump grep`. However, it is limited
to positioning the cursor to the correct line in only the first file,
leaving you to locate subsequent hits in that file or other files using
the editor or pager. By contrast, shit-jump provides the editor with a
complete list of files, lines, and a column number for each match.


Limitations
-----------

This script was written and tested with vim. Given that the quickfix
format is the same as what gcc produces, I expect other tools have a
similar feature for iterating through the list, but I know nothing about
how to activate it.

The shell snippets to generate the quickfix lines will almost certainly
choke on filenames with exotic characters (like newlines).

Contributing
------------

Bug fixes, bug reports, and feature requests should be discussed on the
shit mailing list <shit@vger.kernel.org>, and cc'd to the shit-jump
maintainer, Jeff King <peff@peff.net>.
