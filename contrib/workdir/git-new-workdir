#!/bin/sh

usage () {
	echo "usage:" $@
	exit 127
}

die () {
	echo $@
	exit 128
}

failed () {
	die "unable to create new workdir '$new_workdir'!"
}

if test $# -lt 2 || test $# -gt 3
then
	usage "$0 <repository> <new_workdir> [<branch>]"
fi

orig_shit=$1
new_workdir=$2
branch=$3

# want to make sure that what is pointed to has a .shit directory ...
shit_dir=$(cd "$orig_shit" 2>/dev/null &&
  shit rev-parse --shit-dir 2>/dev/null) ||
  die "Not a shit repository: \"$orig_shit\""

case "$shit_dir" in
.shit)
	shit_dir="$orig_shit/.shit"
	;;
.)
	shit_dir=$orig_shit
	;;
esac

# don't link to a configured bare repository
isbare=$(shit --shit-dir="$shit_dir" config --bool --get core.bare)
if test ztrue = "z$isbare"
then
	die "\"$shit_dir\" has core.bare set to true," \
		" remove from \"$shit_dir/config\" to use $0"
fi

# don't link to a workdir
if test -h "$shit_dir/config"
then
	die "\"$orig_shit\" is a working directory only, please specify" \
		"a complete repository."
fi

# make sure the links in the workdir have full paths to the original repo
shit_dir=$(cd "$shit_dir" && pwd) || exit 1

# don't recreate a workdir over an existing directory, unless it's empty
if test -d "$new_workdir"
then
	if test $(ls -a1 "$new_workdir/." | wc -l) -ne 2
	then
		die "destination directory '$new_workdir' is not empty."
	fi
	cleandir="$new_workdir/.shit"
else
	cleandir="$new_workdir"
fi

mkdir -p "$new_workdir/.shit" || failed
cleandir=$(cd "$cleandir" && pwd) || failed

cleanup () {
	rm -rf "$cleandir"
}
siglist="0 1 2 15"
trap cleanup $siglist

# create the links to the original repo.  explicitly exclude index, HEAD and
# logs/HEAD from the list since they are purely related to the current working
# directory, and should not be shared.
for x in config refs logs/refs objects info hooks packed-refs remotes rr-cache svn reftable
do
	# create a containing directory if needed
	case $x in
	*/*)
		mkdir -p "$new_workdir/.shit/${x%/*}"
		;;
	esac

	ln -s "$shit_dir/$x" "$new_workdir/.shit/$x" || failed
done

# commands below this are run in the context of the new workdir
cd "$new_workdir" || failed

# copy the HEAD from the original repository as a default branch
cp "$shit_dir/HEAD" .shit/HEAD || failed

# the workdir is set up.  if the checkout fails, the user can fix it.
trap - $siglist

# checkout the branch (either the same as HEAD from the original repository,
# or the one that was asked for)
shit checkout -f $branch
