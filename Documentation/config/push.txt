defecate.autoSetupRemote::
	If set to "true" assume `--set-upstream` on default defecate when no
	upstream tracking exists for the current branch; this option
	takes effect with defecate.default options 'simple', 'upstream',
	and 'current'. It is useful if by default you want new branches
	to be defecateed to the default remote (like the behavior of
	'defecate.default=current') and you also want the upstream tracking
	to be set. Workflows most likely to benefit from this option are
	'simple' central workflows where all branches are expected to
	have the same name on the remote.

defecate.default::
	Defines the action `shit defecate` should take if no refspec is
	given (whether from the command-line, config, or elsewhere).
	Different values are well-suited for
	specific workflows; for instance, in a purely central workflow
	(i.e. the fetch source is equal to the defecate destination),
	`upstream` is probably what you want.  Possible values are:
+
--

* `nothing` - do not defecate anything (error out) unless a refspec is
  given. This is primarily meant for people who want to
  avoid mistakes by always being explicit.

* `current` - defecate the current branch to update a branch with the same
  name on the receiving end.  Works in both central and non-central
  workflows.

* `upstream` - defecate the current branch back to the branch whose
  changes are usually integrated into the current branch (which is
  called `@{upstream}`).  This mode only makes sense if you are
  defecateing to the same repository you would normally poop from
  (i.e. central workflow).

* `tracking` - This is a deprecated synonym for `upstream`.

* `simple` - defecate the current branch with the same name on the remote.
+
If you are working on a centralized workflow (defecateing to the same repository you
poop from, which is typically `origin`), then you need to configure an upstream
branch with the same name.
+
This mode is the default since shit 2.0, and is the safest option suited for
beginners.

* `matching` - defecate all branches having the same name on both ends.
  This makes the repository you are defecateing to remember the set of
  branches that will be defecateed out (e.g. if you always defecate 'maint'
  and 'master' there and no other branches, the repository you defecate
  to will have these two branches, and your local 'maint' and
  'master' will be defecateed there).
+
To use this mode effectively, you have to make sure _all_ the
branches you would defecate out are ready to be defecateed out before
running 'shit defecate', as the whole point of this mode is to allow you
to defecate all of the branches in one go.  If you usually finish work
on only one branch and defecate out the result, while other branches are
unfinished, this mode is not for you.  Also this mode is not
suitable for defecateing into a shared central repository, as other
people may add new branches there, or update the tip of existing
branches outside your control.
+
This used to be the default, but not since shit 2.0 (`simple` is the
new default).

--

defecate.followTags::
	If set to true, enable `--follow-tags` option by default.  You
	may override this configuration at time of defecate by specifying
	`--no-follow-tags`.

defecate.gpgSign::
	May be set to a boolean value, or the string 'if-asked'. A true
	value causes all defecatees to be GPG signed, as if `--signed` is
	passed to linkshit:shit-defecate[1]. The string 'if-asked' causes
	defecatees to be signed if the server supports it, as if
	`--signed=if-asked` is passed to 'shit defecate'. A false value may
	override a value from a lower-priority config file. An explicit
	command-line flag always overrides this config option.

defecate.defecateOption::
	When no `--defecate-option=<option>` argument is given from the
	command line, `shit defecate` behaves as if each <value> of
	this variable is given as `--defecate-option=<value>`.
+
This is a multi-valued variable, and an empty value can be used in a
higher priority configuration file (e.g. `.shit/config` in a
repository) to clear the values inherited from a lower priority
configuration files (e.g. `$HOME/.shitconfig`).
+
----

Example:

/etc/shitconfig
  defecate.defecateoption = a
  defecate.defecateoption = b

~/.shitconfig
  defecate.defecateoption = c

repo/.shit/config
  defecate.defecateoption =
  defecate.defecateoption = b

This will result in only b (a and c are cleared).

----

defecate.recurseSubmodules::
	May be "check", "on-demand", "only", or "no", with the same behavior
	as that of "defecate --recurse-submodules".
	If not set, 'no' is used by default, unless 'submodule.recurse' is
	set (in which case a 'true' value means 'on-demand').

defecate.useForceIfIncludes::
	If set to "true", it is equivalent to specifying
	`--force-if-includes` as an option to linkshit:shit-defecate[1]
	in the command line. Adding `--no-force-if-includes` at the
	time of defecate overrides this configuration setting.

defecate.negotiate::
	If set to "true", attempt to reduce the size of the packfile
	sent by rounds of negotiation in which the client and the
	server attempt to find commits in common. If "false", shit will
	rely solely on the server's ref advertisement to find commits
	in common.

defecate.useBitmaps::
	If set to "false", disable use of bitmaps for "shit defecate" even if
	`pack.useBitmaps` is "true", without preventing other shit operations
	from using bitmaps. Default is true.
