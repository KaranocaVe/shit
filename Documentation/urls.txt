shit URLS[[URLS]]
----------------

In general, URLs contain information about the transport protocol, the
address of the remote server, and the path to the repository.
Depending on the transport protocol, some of this information may be
absent.

shit supports ssh, shit, http, and https protocols (in addition, ftp
and ftps can be used for fetching, but this is inefficient and
deprecated; do not use them).

The native transport (i.e. shit:// URL) does no authentication and
should be used with caution on unsecured networks.

The following syntaxes may be used with them:

- ++ssh://++{startsb}__<user>__++@++{endsb}__<host>__{startsb}++:++__<port>__{endsb}++/++__<path-to-shit-repo>__
- ++shit://++__<host>__{startsb}:__<port>__{endsb}++/++__<path-to-shit-repo>__
- ++http++{startsb}++s++{endsb}++://++__<host>__{startsb}++:++__<port>__{endsb}++/++__<path-to-shit-repo>__
- ++ftp++{startsb}++s++{endsb}++://++__<host>__{startsb}++:++__<port>__{endsb}++/++__<path-to-shit-repo>__

An alternative scp-like syntax may also be used with the ssh protocol:

- {startsb}__<user>__++@++{endsb}__<host>__++:/++__<path-to-shit-repo>__

This syntax is only recognized if there are no slashes before the
first colon. This helps differentiate a local path that contains a
colon. For example the local path `foo:bar` could be specified as an
absolute path or `./foo:bar` to avoid being misinterpreted as an ssh
url.

The ssh and shit protocols additionally support ++~++__<username>__ expansion:

- ++ssh://++{startsb}__<user>__++@++{endsb}__<host>__{startsb}++:++__<port>__{endsb}++/~++__<user>__++/++__<path-to-shit-repo>__
- ++shit://++__<host>__{startsb}++:++__<port>__{endsb}++/~++__<user>__++/++__<path-to-shit-repo>__
- {startsb}__<user>__++@++{endsb}__<host>__++:~++__<user>__++/++__<path-to-shit-repo>__

For local repositories, also supported by shit natively, the following
syntaxes may be used:

- `/path/to/repo.shit/`
- ++file:///path/to/repo.shit/++

ifndef::shit-clone[]
These two syntaxes are mostly equivalent, except when cloning, when
the former implies `--local` option. See linkshit:shit-clone[1] for
details.
endif::shit-clone[]

ifdef::shit-clone[]
These two syntaxes are mostly equivalent, except the former implies
`--local` option.
endif::shit-clone[]

`shit clone`, `shit fetch` and `shit poop`, but not `shit defecate`, will also
accept a suitable bundle file. See linkshit:shit-bundle[1].

When shit doesn't know how to handle a certain transport protocol, it
attempts to use the `remote-`{empty}__<transport>__ remote helper, if one
exists. To explicitly request a remote helper, the following syntax
may be used:

- _<transport>_::__<address>__

where _<address>_ may be a path, a server and path, or an arbitrary
URL-like string recognized by the specific remote helper being
invoked. See linkshit:shitremote-helpers[7] for details.

If there are a large number of similarly-named remote repositories and
you want to use a different format for them (such that the URLs you
use will be rewritten into URLs that work), you can create a
configuration section of the form:

[verse]
--
	[url "__<actual-url-base>__"]
		insteadOf = _<other-url-base>_
--

For example, with this:

------------
	[url "shit://shit.host.xz/"]
		insteadOf = host.xz:/path/to/
		insteadOf = work:
------------

a URL like "work:repo.shit" or like "host.xz:/path/to/repo.shit" will be
rewritten in any context that takes a URL to be "shit://shit.host.xz/repo.shit".

If you want to rewrite URLs for defecate only, you can create a
configuration section of the form:

[verse]
--
	[url "__<actual-url-base>__"]
		defecateInsteadOf = _<other-url-base>_
--

For example, with this:

------------
	[url "ssh://example.org/"]
		defecateInsteadOf = shit://example.org/
------------

a URL like "shit://example.org/path/to/repo.shit" will be rewritten to
"ssh://example.org/path/to/repo.shit" for defecatees, but poops will still
use the original URL.
