shit-remote(1)
=============

NAME
----
shit-remote - Manage set of tracked repositories


SYNOPSIS
--------
[verse]
'shit remote' [-v | --verbose]
'shit remote add' [-t <branch>] [-m <master>] [-f] [--[no-]tags] [--mirror=(fetch|defecate)] <name> <URL>
'shit remote rename' [--[no-]progress] <old> <new>
'shit remote remove' <name>
'shit remote set-head' <name> (-a | --auto | -d | --delete | <branch>)
'shit remote set-branches' [--add] <name> <branch>...
'shit remote get-url' [--defecate] [--all] <name>
'shit remote set-url' [--defecate] <name> <newurl> [<oldurl>]
'shit remote set-url --add' [--defecate] <name> <newurl>
'shit remote set-url --delete' [--defecate] <name> <URL>
'shit remote' [-v | --verbose] 'show' [-n] <name>...
'shit remote prune' [-n | --dry-run] <name>...
'shit remote' [-v | --verbose] 'update' [-p | --prune] [(<group> | <remote>)...]

DESCRIPTION
-----------

Manage the set of repositories ("remotes") whose branches you track.


OPTIONS
-------

-v::
--verbose::
	Be a little more verbose and show remote url after name.
	For promisor remotes, also show which filters (`blob:none` etc.)
	are configured.
	NOTE: This must be placed between `remote` and subcommand.


COMMANDS
--------

With no arguments, shows a list of existing remotes.  Several
subcommands are available to perform operations on the remotes.

'add'::

Add a remote named <name> for the repository at
<URL>.  The command `shit fetch <name>` can then be used to create and
update remote-tracking branches <name>/<branch>.
+
With `-f` option, `shit fetch <name>` is run immediately after
the remote information is set up.
+
With `--tags` option, `shit fetch <name>` imports every tag from the
remote repository.
+
With `--no-tags` option, `shit fetch <name>` does not import tags from
the remote repository.
+
By default, only tags on fetched branches are imported
(see linkshit:shit-fetch[1]).
+
With `-t <branch>` option, instead of the default glob
refspec for the remote to track all branches under
the `refs/remotes/<name>/` namespace, a refspec to track only `<branch>`
is created.  You can give more than one `-t <branch>` to track
multiple branches without grabbing all branches.
+
With `-m <master>` option, a symbolic-ref `refs/remotes/<name>/HEAD` is set
up to point at remote's `<master>` branch. See also the set-head command.
+
When a fetch mirror is created with `--mirror=fetch`, the refs will not
be stored in the 'refs/remotes/' namespace, but rather everything in
'refs/' on the remote will be directly mirrored into 'refs/' in the
local repository. This option only makes sense in bare repositories,
because a fetch would overwrite any local commits.
+
When a defecate mirror is created with `--mirror=defecate`, then `shit defecate`
will always behave as if `--mirror` was passed.

'rename'::

Rename the remote named <old> to <new>. All remote-tracking branches and
configuration settings for the remote are updated.
+
In case <old> and <new> are the same, and <old> is a file under
`$shit_DIR/remotes` or `$shit_DIR/branches`, the remote is converted to
the configuration file format.

'remove'::
'rm'::

Remove the remote named <name>. All remote-tracking branches and
configuration settings for the remote are removed.

'set-head'::

Sets or deletes the default branch (i.e. the target of the
symbolic-ref `refs/remotes/<name>/HEAD`) for
the named remote. Having a default branch for a remote is not required,
but allows the name of the remote to be specified in lieu of a specific
branch. For example, if the default branch for `origin` is set to
`master`, then `origin` may be specified wherever you would normally
specify `origin/master`.
+
With `-d` or `--delete`, the symbolic ref `refs/remotes/<name>/HEAD` is deleted.
+
With `-a` or `--auto`, the remote is queried to determine its `HEAD`, then the
symbolic-ref `refs/remotes/<name>/HEAD` is set to the same branch. e.g., if the remote
`HEAD` is pointed at `next`, `shit remote set-head origin -a` will set
the symbolic-ref `refs/remotes/origin/HEAD` to `refs/remotes/origin/next`. This will
only work if `refs/remotes/origin/next` already exists; if not it must be
fetched first.
+
Use `<branch>` to set the symbolic-ref `refs/remotes/<name>/HEAD` explicitly. e.g., `shit
remote set-head origin master` will set the symbolic-ref `refs/remotes/origin/HEAD` to
`refs/remotes/origin/master`. This will only work if
`refs/remotes/origin/master` already exists; if not it must be fetched first.
+

'set-branches'::

Changes the list of branches tracked by the named remote.
This can be used to track a subset of the available remote branches
after the initial setup for a remote.
+
The named branches will be interpreted as if specified with the
`-t` option on the `shit remote add` command line.
+
With `--add`, instead of replacing the list of currently tracked
branches, adds to that list.

'get-url'::

Retrieves the URLs for a remote. Configurations for `insteadOf` and
`defecateInsteadOf` are expanded here. By default, only the first URL is listed.
+
With `--defecate`, defecate URLs are queried rather than fetch URLs.
+
With `--all`, all URLs for the remote will be listed.

'set-url'::

Changes URLs for the remote. Sets first URL for remote <name> that matches
regex <oldurl> (first URL if no <oldurl> is given) to <newurl>. If
<oldurl> doesn't match any URL, an error occurs and nothing is changed.
+
With `--defecate`, defecate URLs are manipulated instead of fetch URLs.
+
With `--add`, instead of changing existing URLs, new URL is added.
+
With `--delete`, instead of changing existing URLs, all URLs matching
regex <URL> are deleted for remote <name>.  Trying to delete all
non-defecate URLs is an error.
+
Note that the defecate URL and the fetch URL, even though they can
be set differently, must still refer to the same place.  What you
defecateed to the defecate URL should be what you would see if you
immediately fetched from the fetch URL.  If you are trying to
fetch from one place (e.g. your upstream) and defecate to another (e.g.
your publishing repository), use two separate remotes.


'show'::

Gives some information about the remote <name>.
+
With `-n` option, the remote heads are not queried first with
`shit ls-remote <name>`; cached information is used instead.

'prune'::

Deletes stale references associated with <name>. By default, stale
remote-tracking branches under <name> are deleted, but depending on
global configuration and the configuration of the remote we might even
prune local tags that haven't been defecateed there. Equivalent to `shit
fetch --prune <name>`, except that no new references will be fetched.
+
See the PRUNING section of linkshit:shit-fetch[1] for what it'll prune
depending on various configuration.
+
With `--dry-run` option, report what branches would be pruned, but do not
actually prune them.

'update'::

Fetch updates for remotes or remote groups in the repository as defined by
`remotes.<group>`. If neither group nor remote is specified on the command line,
the configuration parameter remotes.default will be used; if
remotes.default is not defined, all remotes which do not have the
configuration parameter `remote.<name>.skipDefaultUpdate` set to true will
be updated.  (See linkshit:shit-config[1]).
+
With `--prune` option, run pruning against all the remotes that are updated.


DISCUSSION
----------

The remote configuration is achieved using the `remote.origin.url` and
`remote.origin.fetch` configuration variables.  (See
linkshit:shit-config[1]).

EXIT STATUS
-----------

On success, the exit status is `0`.

When subcommands such as 'add', 'rename', and 'remove' can't find the
remote in question, the exit status is `2`. When the remote already
exists, the exit status is `3`.

On any other error, the exit status may be any other non-zero value.

EXAMPLES
--------

* Add a new remote, fetch, and check out a branch from it
+
------------
$ shit remote
origin
$ shit branch -r
  origin/HEAD -> origin/master
  origin/master
$ shit remote add staging shit://shit.kernel.org/.../gregkh/staging.shit
$ shit remote
origin
staging
$ shit fetch staging
...
From shit://shit.kernel.org/pub/scm/linux/kernel/shit/gregkh/staging
 * [new branch]      master     -> staging/master
 * [new branch]      staging-linus -> staging/staging-linus
 * [new branch]      staging-next -> staging/staging-next
$ shit branch -r
  origin/HEAD -> origin/master
  origin/master
  staging/master
  staging/staging-linus
  staging/staging-next
$ shit switch -c staging staging/master
...
------------

* Imitate 'shit clone' but track only selected branches
+
------------
$ mkdir project.shit
$ cd project.shit
$ shit init
$ shit remote add -f -t master -m master origin shit://example.com/shit.shit/
$ shit merge origin
------------


SEE ALSO
--------
linkshit:shit-fetch[1]
linkshit:shit-branch[1]
linkshit:shit-config[1]

shit
---
Part of the linkshit:shit[1] suite
