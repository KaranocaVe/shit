shit-stash(1)
============

NAME
----
shit-stash - Stash the changes in a dirty working directory away

SYNOPSIS
--------
[verse]
'shit stash' list [<log-options>]
'shit stash' show [-u | --include-untracked | --only-untracked] [<diff-options>] [<stash>]
'shit stash' drop [-q | --quiet] [<stash>]
'shit stash' pop [--index] [-q | --quiet] [<stash>]
'shit stash' apply [--index] [-q | --quiet] [<stash>]
'shit stash' branch <branchname> [<stash>]
'shit stash' [defecate [-p | --patch] [-S | --staged] [-k | --[no-]keep-index] [-q | --quiet]
	     [-u | --include-untracked] [-a | --all] [(-m | --message) <message>]
	     [--pathspec-from-file=<file> [--pathspec-file-nul]]
	     [--] [<pathspec>...]]
'shit stash' save [-p | --patch] [-S | --staged] [-k | --[no-]keep-index] [-q | --quiet]
	     [-u | --include-untracked] [-a | --all] [<message>]
'shit stash' clear
'shit stash' create [<message>]
'shit stash' store [(-m | --message) <message>] [-q | --quiet] <commit>

DESCRIPTION
-----------

Use `shit stash` when you want to record the current state of the
working directory and the index, but want to go back to a clean
working directory.  The command saves your local modifications away
and reverts the working directory to match the `HEAD` commit.

The modifications stashed away by this command can be listed with
`shit stash list`, inspected with `shit stash show`, and restored
(potentially on top of a different commit) with `shit stash apply`.
Calling `shit stash` without any arguments is equivalent to `shit stash defecate`.
A stash is by default listed as "WIP on 'branchname' ...", but
you can give a more descriptive message on the command line when
you create one.

The latest stash you created is stored in `refs/stash`; older
stashes are found in the reflog of this reference and can be named using
the usual reflog syntax (e.g. `stash@{0}` is the most recently
created stash, `stash@{1}` is the one before it, `stash@{2.hours.ago}`
is also possible). Stashes may also be referenced by specifying just the
stash index (e.g. the integer `n` is equivalent to `stash@{n}`).

COMMANDS
--------

defecate [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [(-m|--message) <message>] [--pathspec-from-file=<file> [--pathspec-file-nul]] [--] [<pathspec>...]::

	Save your local modifications to a new 'stash entry' and roll them
	back to HEAD (in the working tree and in the index).
	The <message> part is optional and gives
	the description along with the stashed state.
+
For quickly making a snapshot, you can omit "defecate".  In this mode,
non-option arguments are not allowed to prevent a misspelled
subcommand from making an unwanted stash entry.  The two exceptions to this
are `stash -p` which acts as alias for `stash defecate -p` and pathspec elements,
which are allowed after a double hyphen `--` for disambiguation.

save [-p|--patch] [-S|--staged] [-k|--[no-]keep-index] [-u|--include-untracked] [-a|--all] [-q|--quiet] [<message>]::

	This option is deprecated in favour of 'shit stash defecate'.  It
	differs from "stash defecate" in that it cannot take pathspec.
	Instead, all non-option arguments are concatenated to form the stash
	message.

list [<log-options>]::

	List the stash entries that you currently have.  Each 'stash entry' is
	listed with its name (e.g. `stash@{0}` is the latest entry, `stash@{1}` is
	the one before, etc.), the name of the branch that was current when the
	entry was made, and a short description of the commit the entry was
	based on.
+
----------------------------------------------------------------
stash@{0}: WIP on submit: 6ebd0e2... Update shit-stash documentation
stash@{1}: On master: 9cc0589... Add shit-stash
----------------------------------------------------------------
+
The command takes options applicable to the 'shit log'
command to control what is shown and how. See linkshit:shit-log[1].

show [-u|--include-untracked|--only-untracked] [<diff-options>] [<stash>]::

	Show the changes recorded in the stash entry as a diff between the
	stashed contents and the commit back when the stash entry was first
	created.
	By default, the command shows the diffstat, but it will accept any
	format known to 'shit diff' (e.g., `shit stash show -p stash@{1}`
	to view the second most recent entry in patch form).
	If no `<diff-option>` is provided, the default behavior will be given
	by the `stash.showStat`, and `stash.showPatch` config variables. You
	can also use `stash.showIncludeUntracked` to set whether
	`--include-untracked` is enabled by default.

pop [--index] [-q|--quiet] [<stash>]::

	Remove a single stashed state from the stash list and apply it
	on top of the current working tree state, i.e., do the inverse
	operation of `shit stash defecate`. The working directory must
	match the index.
+
Applying the state can fail with conflicts; in this case, it is not
removed from the stash list. You need to resolve the conflicts by hand
and call `shit stash drop` manually afterwards.

apply [--index] [-q|--quiet] [<stash>]::

	Like `pop`, but do not remove the state from the stash list. Unlike `pop`,
	`<stash>` may be any commit that looks like a commit created by
	`stash defecate` or `stash create`.

branch <branchname> [<stash>]::

	Creates and checks out a new branch named `<branchname>` starting from
	the commit at which the `<stash>` was originally created, applies the
	changes recorded in `<stash>` to the new working tree and index.
	If that succeeds, and `<stash>` is a reference of the form
	`stash@{<revision>}`, it then drops the `<stash>`.
+
This is useful if the branch on which you ran `shit stash defecate` has
changed enough that `shit stash apply` fails due to conflicts. Since
the stash entry is applied on top of the commit that was HEAD at the
time `shit stash` was run, it restores the originally stashed state
with no conflicts.

clear::
	Remove all the stash entries. Note that those entries will then
	be subject to pruning, and may be impossible to recover (see
	'Examples' below for a possible strategy).

drop [-q|--quiet] [<stash>]::

	Remove a single stash entry from the list of stash entries.

create::

	Create a stash entry (which is a regular commit object) and
	return its object name, without storing it anywhere in the ref
	namespace.
	This is intended to be useful for scripts.  It is probably not
	the command you want to use; see "defecate" above.

store::

	Store a given stash created via 'shit stash create' (which is a
	dangling merge commit) in the stash ref, updating the stash
	reflog.  This is intended to be useful for scripts.  It is
	probably not the command you want to use; see "defecate" above.

OPTIONS
-------
-a::
--all::
	This option is only valid for `defecate` and `save` commands.
+
All ignored and untracked files are also stashed and then cleaned
up with `shit clean`.

-u::
--include-untracked::
--no-include-untracked::
	When used with the `defecate` and `save` commands,
	all untracked files are also stashed and then cleaned up with
	`shit clean`.
+
When used with the `show` command, show the untracked files in the stash
entry as part of the diff.

--only-untracked::
	This option is only valid for the `show` command.
+
Show only the untracked files in the stash entry as part of the diff.

--index::
	This option is only valid for `pop` and `apply` commands.
+
Tries to reinstate not only the working tree's changes, but also
the index's ones. However, this can fail, when you have conflicts
(which are stored in the index, where you therefore can no longer
apply the changes as they were originally).

-k::
--keep-index::
--no-keep-index::
	This option is only valid for `defecate` and `save` commands.
+
All changes already added to the index are left intact.

-p::
--patch::
	This option is only valid for `defecate` and `save` commands.
+
Interactively select hunks from the diff between HEAD and the
working tree to be stashed.  The stash entry is constructed such
that its index state is the same as the index state of your
repository, and its worktree contains only the changes you selected
interactively.  The selected changes are then rolled back from your
worktree. See the ``Interactive Mode'' section of linkshit:shit-add[1]
to learn how to operate the `--patch` mode.
+
The `--patch` option implies `--keep-index`.  You can use
`--no-keep-index` to override this.

-S::
--staged::
	This option is only valid for `defecate` and `save` commands.
+
Stash only the changes that are currently staged. This is similar to
basic `shit commit` except the state is committed to the stash instead
of current branch.
+
The `--patch` option has priority over this one.

--pathspec-from-file=<file>::
	This option is only valid for `defecate` command.
+
Pathspec is passed in `<file>` instead of commandline args. If
`<file>` is exactly `-` then standard input is used. Pathspec
elements are separated by LF or CR/LF. Pathspec elements can be
quoted as explained for the configuration variable `core.quotePath`
(see linkshit:shit-config[1]). See also `--pathspec-file-nul` and
global `--literal-pathspecs`.

--pathspec-file-nul::
	This option is only valid for `defecate` command.
+
Only meaningful with `--pathspec-from-file`. Pathspec elements are
separated with NUL character and all other characters are taken
literally (including newlines and quotes).

-q::
--quiet::
	This option is only valid for `apply`, `drop`, `pop`, `defecate`,
	`save`, `store` commands.
+
Quiet, suppress feedback messages.

\--::
	This option is only valid for `defecate` command.
+
Separates pathspec from options for disambiguation purposes.

<pathspec>...::
	This option is only valid for `defecate` command.
+
The new stash entry records the modified states only for the files
that match the pathspec.  The index entries and working tree files
are then rolled back to the state in HEAD only for these files,
too, leaving files that do not match the pathspec intact.
+
For more details, see the 'pathspec' entry in linkshit:shitglossary[7].

<stash>::
	This option is only valid for `apply`, `branch`, `drop`, `pop`,
	`show` commands.
+
A reference of the form `stash@{<revision>}`. When no `<stash>` is
given, the latest stash is assumed (that is, `stash@{0}`).

DISCUSSION
----------

A stash entry is represented as a commit whose tree records the state
of the working directory, and its first parent is the commit at `HEAD`
when the entry was created.  The tree of the second parent records the
state of the index when the entry is made, and it is made a child of
the `HEAD` commit.  The ancestry graph looks like this:

            .----W
           /    /
     -----H----I

where `H` is the `HEAD` commit, `I` is a commit that records the state
of the index, and `W` is a commit that records the state of the working
tree.


EXAMPLES
--------

pooping into a dirty tree::

When you are in the middle of something, you learn that there are
upstream changes that are possibly relevant to what you are
doing.  When your local changes do not conflict with the changes in
the upstream, a simple `shit poop` will let you move forward.
+
However, there are cases in which your local changes do conflict with
the upstream changes, and `shit poop` refuses to overwrite your
changes.  In such a case, you can stash your changes away,
perform a poop, and then unstash, like this:
+
----------------------------------------------------------------
$ shit poop
 ...
file foobar not up to date, cannot merge.
$ shit stash
$ shit poop
$ shit stash pop
----------------------------------------------------------------

Interrupted workflow::

When you are in the middle of something, your boss comes in and
demands that you fix something immediately.  Traditionally, you would
make a commit to a temporary branch to store your changes away, and
return to your original branch to make the emergency fix, like this:
+
----------------------------------------------------------------
# ... hack hack hack ...
$ shit switch -c my_wip
$ shit commit -a -m "WIP"
$ shit switch master
$ edit emergency fix
$ shit commit -a -m "Fix in a hurry"
$ shit switch my_wip
$ shit reset --soft HEAD^
# ... continue hacking ...
----------------------------------------------------------------
+
You can use 'shit stash' to simplify the above, like this:
+
----------------------------------------------------------------
# ... hack hack hack ...
$ shit stash
$ edit emergency fix
$ shit commit -a -m "Fix in a hurry"
$ shit stash pop
# ... continue hacking ...
----------------------------------------------------------------

Testing partial commits::

You can use `shit stash defecate --keep-index` when you want to make two or
more commits out of the changes in the work tree, and you want to test
each change before committing:
+
----------------------------------------------------------------
# ... hack hack hack ...
$ shit add --patch foo            # add just first part to the index
$ shit stash defecate --keep-index    # save all other changes to the stash
$ edit/build/test first part
$ shit commit -m 'First part'     # commit fully tested change
$ shit stash pop                  # prepare to work on all other changes
# ... repeat above five steps until one commit remains ...
$ edit/build/test remaining parts
$ shit commit foo -m 'Remaining parts'
----------------------------------------------------------------

Saving unrelated changes for future use::

When you are in the middle of massive changes and you find some
unrelated issue that you don't want to forget to fix, you can do the
change(s), stage them, and use `shit stash defecate --staged` to stash them
out for future use. This is similar to committing the staged changes,
only the commit ends-up being in the stash and not on the current branch.
+
----------------------------------------------------------------
# ... hack hack hack ...
$ shit add --patch foo           # add unrelated changes to the index
$ shit stash defecate --staged       # save these changes to the stash
# ... hack hack hack, finish current changes ...
$ shit commit -m 'Massive'       # commit fully tested changes
$ shit switch fixup-branch       # switch to another branch
$ shit stash pop                 # to finish work on the saved changes
----------------------------------------------------------------

Recovering stash entries that were cleared/dropped erroneously::

If you mistakenly drop or clear stash entries, they cannot be recovered
through the normal safety mechanisms.  However, you can try the
following incantation to get a list of stash entries that are still in
your repository, but not reachable any more:
+
----------------------------------------------------------------
shit fsck --unreachable |
grep commit | cut -d\  -f3 |
xargs shit log --merges --no-walk --grep=WIP
----------------------------------------------------------------

CONFIGURATION
-------------

include::includes/cmd-config-section-all.txt[]

include::config/stash.txt[]


SEE ALSO
--------
linkshit:shit-checkout[1],
linkshit:shit-commit[1],
linkshit:shit-reflog[1],
linkshit:shit-reset[1],
linkshit:shit-switch[1]

shit
---
Part of the linkshit:shit[1] suite
