#!/bin/sh
# Copyright (c) 2012 Felipe Contreras

# The first argument can be a url when the fetch/defecate command was a url
# instead of a configured remote. In this case, use a generic alias.
if test "$1" = "testshit::$2"; then
	alias=_
else
	alias=$1
fi
url=$2

dir="$shit_DIR/testshit/$alias"

if ! shit rev-parse --is-inside-shit-dir
then
	exit 1
fi

h_refspec="refs/heads/*:refs/testshit/$alias/heads/*"
t_refspec="refs/tags/*:refs/testshit/$alias/tags/*"

if test -n "$shit_REMOTE_TESTshit_NOREFSPEC"
then
	h_refspec=""
	t_refspec=""
fi

shit_DIR="$url/.shit"
export shit_DIR

force=
object_format=

mkdir -p "$dir"

if test -z "$shit_REMOTE_TESTshit_NO_MARKS"
then
	shitmarks="$dir/shit.marks"
	testshitmarks="$dir/testshit.marks"
	test -e "$shitmarks" || >"$shitmarks"
	test -e "$testshitmarks" || >"$testshitmarks"
fi

while read line
do
	case $line in
	capabilities)
		echo 'import'
		echo 'export'
		test -n "$h_refspec" && echo "refspec $h_refspec"
		test -n "$t_refspec" && echo "refspec $t_refspec"
		if test -n "$shitmarks"
		then
			echo "*import-marks $shitmarks"
			echo "*export-marks $shitmarks"
		fi
		test -n "$shit_REMOTE_TESTshit_SIGNED_TAGS" && echo "signed-tags"
		test -n "$shit_REMOTE_TESTshit_NO_PRIVATE_UPDATE" && echo "no-private-update"
		echo 'option'
		echo 'object-format'
		echo
		;;
	list)
		test -n "$object_format" &&
			echo ":object-format $(shit rev-parse --show-object-format=storage)"
		shit for-each-ref --format='? %(refname)' 'refs/heads/' 'refs/tags/'
		head=$(shit symbolic-ref HEAD)
		echo "@$head HEAD"
		echo
		;;
	import*)
		# read all import lines
		while true
		do
			ref="${line#* }"
			refs="$refs $ref"
			read line
			test "${line%% *}" != "import" && break
		done

		if test -n "$shitmarks"
		then
			echo "feature import-marks=$shitmarks"
			echo "feature export-marks=$shitmarks"
		fi

		if test -n "$shit_REMOTE_TESTshit_FAILURE"
		then
			echo "feature done"
			exit 1
		fi

		echo "feature done"
		shit fast-export \
			${h_refspec:+"--refspec=$h_refspec"} \
			${t_refspec:+"--refspec=$t_refspec"} \
			${testshitmarks:+"--import-marks=$testshitmarks"} \
			${testshitmarks:+"--export-marks=$testshitmarks"} \
			$refs
		echo "done"
		;;
	export)
		if test -n "$shit_REMOTE_TESTshit_FAILURE"
		then
			# consume input so fast-export doesn't get SIGPIPE;
			# shit would also notice that case, but we want
			# to make sure we are exercising the later
			# error checks
			while read line; do
				test "done" = "$line" && break
			done
			exit 1
		fi

		before=$(shit for-each-ref --format=' %(refname) %(objectname) ')

		shit fast-import \
			${force:+--force} \
			${testshitmarks:+"--import-marks=$testshitmarks"} \
			${testshitmarks:+"--export-marks=$testshitmarks"} \
			--quiet

		# figure out which refs were updated
		shit for-each-ref --format='%(refname) %(objectname)' |
		while read ref a
		do
			case "$before" in
			*" $ref $a "*)
				continue ;;	# unchanged
			esac
			if test -z "$shit_REMOTE_TESTshit_defecate_ERROR"
			then
				echo "ok $ref"
			else
				echo "error $ref $shit_REMOTE_TESTshit_defecate_ERROR"
			fi
		done

		echo
		;;
	option\ *)
		read cmd opt val <<-EOF
		$line
		EOF
		case $opt in
		force)
			test $val = "true" && force="true" || force=
			echo "ok"
			;;
		object-format)
			test $val = "true" && object_format="true" || object_format=
			echo "ok"
			;;
		*)
			echo "unsupported"
			;;
		esac
		;;
	'')
		exit
		;;
	esac
done
